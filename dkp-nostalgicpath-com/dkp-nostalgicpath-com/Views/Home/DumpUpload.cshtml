@model dkp_nostalgicpath_com.Models.DumpUploadModel

@{ 
    var timeZones = TimeZoneInfo
        .GetSystemTimeZones()
        .Select(f => new SelectListItem
        {
            Text = f.DisplayName,
            Value = f.Id
        });
}

<h2>Uploading Raid Dumps</h2>
@if (ViewBag.ParsedDumps != null && ViewBag.ParsedDumps.Count > 0)
{
    <p>Thank you.  @ViewBag.ParsedDumps.Count raid dump(s) have been successfully parsed.</p>
    <ul>
        @foreach(var dump in ViewBag.ParsedDumps)
        {
            <li>@dump</li>
        }
    </ul>
}
else
{
    <p>If you are a raid leader, please upload your raid dumps.  Do not modify the file names generated by EQ, they are used to correctly calculate the time of the dump.</p>
    using (Html.BeginForm("UploadParse", "Home", FormMethod.Post, new { enctype = "multipart/form-data", @id = "dumpForm" }))
    {
        @(Html.AntiForgeryToken())

    <div>
        @Html.LabelFor(m => m.TimeZoneId)
        @Html.DropDownListFor(m => m.TimeZoneId, timeZones)
        @Html.ValidationMessageFor(model => model.TimeZoneId, "", new { @class = "text-danger" })
    </div>

        <label class="btn btn-default btn-file">
            Browse @Html.TextBoxFor(model => model.files, "", new { @type = "file", @multiple = "multiple", @style = "display:none;", @accept = ".txt" })
        </label>
        @(Html.ValidationMessageFor(model => model.files, "", new { @class = "text-danger" }))
        @*<input type="submit" value="Submit" />*@
    }
}

<script type="text/javascript">
    document.addEventListener( 'DOMContentLoaded', function () {
        var fileInput = document.querySelector( 'input[type=file]' );
        var fileForm = document.querySelector( '#dumpForm' );

        fileInput.addEventListener( 'change', function () { fileForm.submit(); } );

    } );
    //$( document ).ready( function () {
    //    $( 'input[type=file]' ).on( 'change', function () {
    //        var form = $( this ).parent( 'form' );
    //        form.submit();
    //    } );
    //} );
</script>